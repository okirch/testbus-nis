#!/bin/bash
#
# This is a draft idea of how headers for testbus scripts
# could be used to drive the setup
##################################################################
# Start-Testbus-Requirements
# Instances		2
# Bridged-Network	yes
# Instance-NICs		1
# End-Testbus-Requirements
##################################################################

NISDOMAIN=nistest.opensuse.org
USE_YAST=true

# TESTBUS_SELFTEST_DEBUG=all

. /usr/share/testbus/functions

TMPDIR=/tmp/testbus-yp
mkdir -p $TMPDIR

# Override the timeout for claiming the host.
# Bringing up a VM guest can take some time, especially if it goes
# through a firstboot stage first.
TESTBUS_CLAIM_TIMEOUT=240

function __run_client {
	testbus_run_command --host $NIS_CLIENT "$@"
}

function run_client {
	__run_client "$@" || testbus_test_failure
}

function run_client_script {
	run_client --host $NIS_CLIENT --send-script "$@"
}

function __run_server {
	testbus_run_command --host $NIS_SERVER "$@"
}

function run_server {
	__run_server "$@" || testbus_test_failure
}

##################################################################
# Helper functions. When these accumulate, we should put them
# into a separate file (nis.functions)
##################################################################
function nis_verify_binding {

	local expected actual

	expected=$1

	testbus_trace "client: verify binding"
	actual=`run_client /usr/bin/ypwhich`
	if [ -z "$actual" ]; then
		testbus_test_failure "yp client not bound (should be bound to $expected)"
	elif [ "$actual" != $expected ]; then
		testbus_test_failure "yp client should be bound to $expected, but bound to $actual instead"
	else
		return 0
	fi

	return 1
}

function nis_verify_ypcat {

	local testname mapname testname result

	testname=$1
	mapname=$2

	testbus_test_begin "$testname"
	result=`__run_client /usr/bin/ypcat $mapname`
	if [ $? -ne 0 ]; then
		testbus_test_failure "ypcat $mapname failed"
		if [ -n "$result" ]; then
			echo "Command output:"
			echo $result
		fi >&2
		return 1;
	fi

	if [ -z "$result" ]; then
		testbus_test_failure "ypcat $mapname returned an empty map"
		return 1;
	fi

	return 0;
}

function nis_verify_ypmatch {

	local testname key mapname expected exitval result

	testname=$1
	key=$2
	mapname=$3
	expected=${4:-notempty}

	testbus_test_begin "$testname"

	result=`__run_client /usr/bin/ypmatch $key $mapname`
	exitval=$?

	if [ "$expected" = "fail" ]; then
		if [ "$exitval" -ne 0 ]; then
			testbus_trace "Command returned error (as expected): exit code $exitval"
			return 0
		fi
		testbus_test_failure "ypmatch $key $mapname should have failed, but succeeded"
		if [ -n "$result" ]; then
			echo "Command output:"
			echo $result
		fi >&2
		return 1;
	fi

	if [ $exitval -ne 0 ]; then
		testbus_test_failure "ypmatch $key $mapname failed"
		if [ -n "$result" ]; then
			echo "Command output:"
			echo $result
		fi >&2
		return 1;
	fi

	if [ "$expected" = "notempty" ]; then
		if [ -z "$result" ]; then
			testbus_test_failure "ypmatch $key $mapname returns nothing"
			return 1;
		fi
	else
		case $result in
		*"$expected"*)
			: ;;
		*)
			testbus_test_failure "ypmatch $key $mapname did not return expected value"
			echo "Expected: <<$expected>>"
			echo "Received:"
			echo $result
			return 1;;
		esac >&2
	fi


	return 0;
}

##################################################################
# Start testing
##################################################################
testbus_group_begin $0

NIS_SERVER=`testbus_claim_host --role server`
test -n "$NIS_SERVER" || testbus_exit_fail "unable to claim NIS server"

NIS_CLIENT=`testbus_claim_host --role client`
test -n "$NIS_CLIENT" || testbus_exit_fail "unable to claim NIS client"

NIS_SERVER_IP=`testbus_getenv_nonempty $NIS_SERVER primary_ip`
NIS_CLIENT_IP=`testbus_getenv_nonempty $NIS_CLIENT primary_ip`

NIS_SERVER_NAME=`testbus_getenv_nonempty $NIS_SERVER hostname`
NIS_CLIENT_NAME=`testbus_getenv_nonempty $NIS_CLIENT hostname`

cat <<EOF
Claimed hosts
Server:  $NIS_SERVER_NAME ($NIS_SERVER_IP)
Client:  $NIS_CLIENT_NAME ($NIS_CLIENT_IP)
EOF

##################################################################
# Initialize NIS server
##################################################################
testbus_test_begin server-init

testbus_trace "server: setting up NIS server"

# I would have loved to use yast2 for this, but right now it always
# wants _at least_ a pipe on stdout, preferably a tty. If you make it
# write to anything else, it'll just die quietly.
if $USE_YAST; then
	run_server --use-terminal /sbin/yast2 nis-server master domain=$NISDOMAIN yppasswd=yes verbose
else
	testbus_trace "server: setting nis domain to $NISDOMAIN"
	run_server /bin/domainname $NISDOMAIN

	testbus_trace "server: building default NIS maps"
	run_server /usr/bin/make -C /var/yp

	testbus_trace "server: starting ypserv"
	run_server /etc/init.d/ypserv start

	testbus_trace "server: starting yppasswdd"
	run_server /etc/init.d/yppasswdd start
fi

##################################################################
# Initialize NIS client
##################################################################
testbus_group_begin client-init

if $USE_YAST; then
	testbus_test_begin yastconfig
	run_client --use-terminal /sbin/yast2 nis enable
	run_client --use-terminal /sbin/yast2 nis configure domain=$NISDOMAIN server="$NIS_SERVER_IP"
	run_client --use-terminal /sbin/yast2 nis summary

	testbus_test_begin check-domain
	domain=`run_client /bin/domainname`
	if [ -z "$domain" -o "$domain" != "$NISDOMAIN" ]; then
		testbus_test_failure "yast failed to set the domain name"

		testbus_test_begin override-domain
		run_client /bin/domainname $NISDOMAIN
	fi

	testbus_trace "client: starting ypbind"
	testbus_test_begin restart
	run_client /etc/init.d/ypbind restart
	run_client /usr/sbin/systemctl status ypbind.service
else
	testbus_trace "client: uploading config files"
	echo $NISDOMAIN |
		testbus_upload_file $NIS_CLIENT - /etc/defaultdomain
	echo "domain $NISDOMAIN server $NIS_SERVER_IP" |
		testbus_upload_file $NIS_CLIENT - /etc/yp.conf

	run_client_script - <<-EOF
	#!/bin/sh

	if ! grep -qs '^+$' /etc/passwd; then
		echo + >> /etc/passwd
	fi
	if ! grep -qs '^+$' /etc/shadow; then
		echo + >> /etc/shadow
	fi

	if ! grep -qs '^password.*pam_unix\.so.*nis' /etc/pam.d/common-password; then
		sed -i '/^password.*pam_unix\.so/!b;/\<nis\>/b;s/$/ nis debug/' /etc/pam.d/common-password
	fi

	exit 0
EOF

	testbus_trace "client: starting ypbind"
	run_client /etc/init.d/ypbind restart
fi

nis_verify_binding $NIS_SERVER_IP

testbus_group_finish

##################################################################
# Try NIS host resolution
##################################################################
testbus_test_begin nis-hosts

# Change nsswitch.conf
testbus_trace "configure client to use NIS for host lookups"
run_client /bin/cp /etc/nsswitch.conf /etc/nsswitch.conf.save
echo "hosts: files nis" |
	testbus_upload_file $NIS_CLIENT - /etc/nsswitch.conf

# On the server, generates the hosts.* maps
testbus_trace "configuring server to generate hosts.* maps"
run_server /usr/bin/make -C /var/yp/$NISDOMAIN -f /var/yp/Makefile hosts

# Make sure ping in general works
testbus_trace "verify name resolution"
run_client /bin/ping -c 1 127.0.0.1
run_client /bin/ping -c 1 $NIS_SERVER_IP
# Check that we can resolve the server's hostname
run_client /bin/ping -c 1 $NIS_SERVER_NAME
# Check that we can still resolve the client's hostname (which should be
# in the hosts file)
run_client /bin/ping -c 1 $NIS_CLIENT_NAME

# Restore nsswitch.conf
testbus_trace "client side cleanup"
run_client /bin/mv /etc/nsswitch.conf.save /etc/nsswitch.conf

##################################################################
# Try NIS user name resolution
##################################################################
testbus_group_begin nis-users

# Do not change nsswitch.conf - it should have passwd in compat mode
# by default.

##################################################################
# On the server, generates the hosts.* maps
testbus_test_begin "mapgen"
testbus_trace "configuring server to generate passwd.* maps"
run_server /usr/bin/make -C /var/yp/$NISDOMAIN -f /var/yp/Makefile passwd group
testbus_test_success

##################################################################
# Make sure map dumping in general works
testbus_trace "make sure passwd and group maps exist"
nis_verify_ypcat "passwd1" passwd
nis_verify_ypcat "passwd2" passwd.byname
nis_verify_ypcat "passwd3" passwd.byuid
nis_verify_ypcat "group1"  group
nis_verify_ypcat "group2"  group.byname
nis_verify_ypcat "group3"  group.bygid

##################################################################
testbus_group_begin "adduser"
USERNAME="testbus"
USERPASS="T3stbus@"
USERUID="666"
NEWUSERPASS="S0eL1te!"

testbus_test_begin "system-add"
if $USE_YAST; then
	run_server --use-terminal /sbin/yast2 users add username=$USERNAME uid=$USERUID password=$USERPASS no_home
else
	HASHPASS=`mkpasswd -m sha-256 $USERPASS`
	run_server /usr/sbin/useradd --uid $USERUID --password $HASHPASS $USERNAME
fi

# Even Yast does not rebuild the maps automatically
if ! nis_verify_ypmatch "verify-added" $USERNAME passwd.byname; then
	testbus_trace "useradd did not automatically rebuild NIS maps, tsk tsk tsk"
	testbus_test_begin "rebuild-maps"
	run_server /usr/bin/make -C /var/yp/$NISDOMAIN -f /var/yp/Makefile passwd
fi

testbus_group_finish

##################################################################
nis_verify_ypmatch "verify-name" $USERNAME passwd.byname
nis_verify_ypmatch "verify-uid"  $USERUID  passwd.byuid

# Try nsswitch lookup
testbus_test_begin "id"
run_client /usr/bin/id $USERNAME

testbus_test_begin "groups"
run_client /usr/bin/groups $USERNAME

# Try to authenticate via PAM
testbus_test_begin "pam-authenticate"
run_client /bin/pam-test --debug --pam-service login --username testbus --password $USERPASS authenticate

# Try to change the password
# This seems to be buggy in openSUSE right now
testbus_test_begin "pam-chauthtok"
run_client /bin/pam-test --debug --pam-service passwd --username testbus --old-password $USERPASS --new-password "$NEWUSERPASS" chauthtok authenticate

# Now delete the account
##################################################################
testbus_group_begin "deluser"

testbus_test_begin "system-del"
if $USE_YAST; then
	run_server --use-terminal /sbin/yast2 users delete username=$USERNAME
else
	run_server /usr/bin/userdel $USERNAME
	run_server /usr/bin/make -C /var/yp/$NISDOMAIN -f /var/yp/Makefile passwd
fi

# Even Yast does not rebuild the maps automatically
if ! nis_verify_ypmatch "verify-added" $USERNAME passwd.byname fail; then
	testbus_trace "useradd did not automatically rebuild NIS maps, tsk tsk tsk"
	testbus_test_begin "rebuild-maps"
	run_server /usr/bin/make -C /var/yp/$NISDOMAIN -f /var/yp/Makefile passwd
fi

testbus_group_finish

##################################################################
nis_verify_ypmatch "verify-name-gone" $USERNAME passwd.byname fail
nis_verify_ypmatch "verify-uid-gone"  $USERUID  passwd.byuid  fail

testbus_group_finish

##################################################################
# Try binding by broadcast
##################################################################
testbus_group_begin nis-broadcast

testbus_test_begin rebind
echo "broadcast" |
	testbus_upload_file $NIS_CLIENT - /etc/yp.conf
if run_client /etc/init.d/ypbind restart; then
	nis_verify_binding $NIS_SERVER_IP
else
	run_client /usr/bin/systemctl status ypbind.service
fi

testbus_exit
